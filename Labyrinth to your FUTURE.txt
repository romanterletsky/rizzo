import pygame
import random

pygame.init()

# шрифти
font1 = pygame.font.SysFont("Times New Roman", 160, True)
font2 = pygame.font.SysFont("Times New Roman", 35, True)

class cell:
    def __init__(self,up,down,left,right):
        self.visited = False
        self.walls = [up,down,left,right]

class labyrinth:
    # генерує лабіринт
    def __init__(self,id):
        self.id = id
        self.walls = []
        self.maze_walls = []
        self.cells = []

        x = 0
        t = 0

       # створює всі клітини всередині лабіринту
        for f in range(22):
            for s in range(28):
                self.cells.append(cell((x + 8, t, 25, 8), (x + 8, t + 33, 25, 8), (x, t + 8, 8, 25), (x + 33, t + 8, 8, 25)))
                x += 33
            x = 0
            t += 33
        # генерує лабіринт за допомогою алгоритму prim
        for v in self.cells[0].walls:
            self.maze_walls.append(v)
            self.walls.append(v)
        self.cells[0].visited = True
        
        
        while len(self.walls) > 0:
            wall = random.choice(self.walls)
            # перевіряє, які клітини розділені стіною
            divided_cells = []
            for u in self.cells:
                if wall in u.walls:
                    divided_cells.append(u)
            if len(divided_cells) > 1 and (not ((divided_cells[0].visited and divided_cells[1].visited) or ((not divided_cells[0].visited) and (not divided_cells[1].visited)))):
                # перевіряє, які клітини були відвідані
                for k in divided_cells:
                    k.walls.remove(wall)

                    if k.visited == False:
                        k.visited = True

                    for q in k.walls:
                        if not q in self.walls:
                            self.walls.append(q)

                        if not q in self.maze_walls:
                            self.maze_walls.append(q)

                    if wall in self.maze_walls:
                        self.maze_walls.remove(wall)

            self.walls.remove(wall)

        for j in range(0,736,33):
            for i in range(0,951,33):
                self.maze_walls.append((i, j, 8, 8))

    # малює лабіринт
    def draw(self, goal):
        screen.fill((0, 0, 0))

        for k in self.maze_walls:
            pygame.draw.rect(screen, color, pygame.Rect(k[0],k[1],k[2],k[3]))
        pygame.draw.rect(screen, (0, 255, 0), goal) # кінець

id = 0
running = True
while running:
    screen = pygame.display.set_mode((930, 733))
    pygame.display.set_caption("Labyrinth to your FUTURE")
    done = False
    color = (255,255,255) # колір стін
    x = 16
    y = 16
    clock = pygame.time.Clock()
    id += 1
    maze = labyrinth(id)
    goal = pygame.Rect(899,701,25,25)
    victory = False
    speed = 1 # швидкість руху

    while not done:
        for event in pygame.event.get():

            if event.type == pygame.QUIT:
                done = True
                running = False

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    done = True
       
        if not victory:
            move_up = True
            move_down = True
            move_left = True
            move_right = True
            pressed = pygame.key.get_pressed()

            if pressed[pygame.K_w] or pressed[pygame.K_UP]:
                # перевіряє, чи їх перекриває стіна
                for m in maze.maze_walls:
                    player = pygame.Rect(x, y - speed, 10, 10)
                    if player.colliderect(pygame.Rect(m[0],m[1],m[2],m[3])):
                        move_up = False
                        break
                if move_up:
                    y -= speed

            if pressed[pygame.K_s] or pressed[pygame.K_DOWN]:
                player = pygame.Rect(x, y + speed, 10, 10)
                for m in maze.maze_walls:
                    if player.colliderect(pygame.Rect(m[0],m[1],m[2],m[3])):
                        move_down = False
                        break
                if move_down:
                    y += speed

            if pressed[pygame.K_a] or pressed[pygame.K_LEFT]:
                player = pygame.Rect(x - speed, y, 10, 10)
                for m in maze.maze_walls:
                    if player.colliderect(pygame.Rect(m[0],m[1],m[2],m[3])):
                        move_left = False
                        break
                if move_left:
                    x -= speed

            if pressed[pygame.K_d] or pressed[pygame.K_RIGHT]:
                player = pygame.Rect(x + speed, y, 10, 10)
                for m in maze.maze_walls:
                    if player.colliderect(pygame.Rect(m[0],m[1],m[2],m[3])):
                        move_right = False
                        break
                if move_right:
                    x += speed


            # перевіряє, чи гравець досяг мети
            if goal.colliderect((x, y, 10, 10)):
                victory = True
            # малює екран
            maze.draw(goal)
            pygame.draw.rect(screen, (255, 0, 0), pygame.Rect(x,y,10,10))


# екран перемоги
        if victory:
            screen.fill((0, 0, 0))
            victory_text = font1.render("Nice job!",True,(255,255,255))
            reset = font2.render("(Press Enter to Start New Game)",True,(255,255,255))

            screen.blit(victory_text,(468 - (victory_text.get_width() // 2), 328 - (victory_text.get_height() // 2)))
            screen.blit(reset, (468 - (reset.get_width() // 2), (248 - (reset.get_height() // 2)) + victory_text.get_height()))

           
        clock.tick(1000)
        pygame.display.flip()